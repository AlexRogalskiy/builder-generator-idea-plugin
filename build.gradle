apply plugin: 'java'
apply plugin: 'code-quality'
apply plugin: 'idea'
apply from: 'https://raw.github.com/breskeby/gradleplugins/master/emmaPlugin/emma.gradle'


// --- properties ---
ideaInstallationPath = 'C:/Program Files (x86)/JetBrains/IntelliJ IDEA Community Edition 11.0'
ideaJdk = 'IDEA IC-111.69'
sourceCompatibility = 1.6
// --- properties ---

// --- changes to idea plugin ---
idea {
    module {
        iml {
            whenMerged { module ->
                removeIdeaJdkDependencies(module)
            }
            withXml {
                def module = it.asNode()
                changeModuleType(module)
                removeUnnecessaryComponent(module)
                appendRequiredComponent(module)
                changeComponentWithNewModuleRootManager(module)
            }
        }
    }
}
// --- changes to idea plugin ---

configurations {
    pmdConf
    findbugs
    pit
}


// --- findbugs ---
findbugsOutputDirName = "findbugs"
findbugsReportDir     = new File(reportsDir, findbugsOutputDirName)
findbugsOutputType    = 'xml'
findbugsJvmargs       = '-Xmx512M'
findbugsWarning       = false

sourceSets.each { sourceSet ->

    def findbugsTask = task(sourceSet.getTaskName('findbugs', null)) {

        def outputFile = new File(findbugsReportDir, "${sourceSet.name}.${findbugsOutputType}")

        dependsOn sourceSet.classesTaskName
        inputs.dir sourceSet.classesDir
        outputs.file outputFile

        doLast {

            ant {
                taskdef(resource: 'edu/umd/cs/findbugs/anttask/tasks.properties',
                        classpath: configurations.findbugs.asPath)

                mkdir(dir: findbugsReportDir)

                findbugs(classpath: configurations.findbugs.asPath,
                        pluginlist: '',
                        output: findbugsOutputType,
                        outputFile: outputFile,
                        failOnError: true,
                        jvmargs: findbugsJvmargs,
                        reportLevel: 'low',
                        workHard: true,
                        // sets this variable to true if any warnings found
                        warningsProperty: 'findbugsWarning') {

                    auxClassPath(path: configurations.compile.asPath)
                    sourceSet.allJava.srcDirs.each { sourcepath(path: it) }
                    "class"(location: sourceSet.classesDir)
                }
                if (findbugsWarning) {
                    throw new IllegalStateException('Findbugs found warnings, please take a look at findbugs report.')
                }
            }
        }
    }
    tasks['check'].dependsOn findbugsTask
}
findbugsTest.enabled = false // disable checking test sources
// --- findbugs ---


// --- pmd ---
task pmd << {
    ant {
        taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)

        pmd(shortFilenames: 'true', failonruleviolation: 'true', rulesetfiles:
                '''rulesets/basic.xml, rulesets/codesize.xml, rulesets/coupling.xml, rulesets/imports.xml,
                rulesets/strictexception.xml, rulesets/strings.xml, rulesets/sunsecure.xml,
                rulesets/typeresolution.xml, rulesets/unusedcode.xml''') {
            formatter(type: 'text', toConsole: 'true')
            fileset(dir: "src/main/java") {
                include(name: '**/*.java')
            }
            fileset(dir: "src/test/java") {
                exclude(name: '**/*.java')
            }
        }
    }
}

checkstyleMain.dependsOn {
    pmd
}
// --- pmd ---


task pit << {
    ant {
        taskdef(name: 'pitestant', classname: 'org.pitest.PitestAnt', classpath: configurations.pit.asPath)
        pitestant(classesInScope: 'pl.mjedynak.idea.plugins.builder.*', sourceDirs: sourceSets.main.java.srcDirs, reportDir: "$reportsDir/pit",
                classpath: sourceSets.test.runtimeClasspath.asPath + configurations.pit.asPath )
    }
}


repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile fileTree(dir: ideaInstallationPath + '/lib', include: '*.jar')
    testCompile 'org.mockito:mockito-all:1.9.0'
    testCompile 'org.powermock:powermock-module-junit4:1.4.10'
    testCompile 'org.powermock:powermock-api-mockito:1.4.10'
    testCompile 'org.springframework:spring-test:3.1.0.RELEASE'
    testCompile 'org.springframework:spring-core:3.1.0.RELEASE'

    pmdConf 'pmd:pmd:4.3'

    findbugs "com.google.code.findbugs:findbugs-ant:1.3.9"

    pit 'org.pitest:pitest-ant:0.25-SNAPSHOT'

    emma "emma:emma:2.0.5312"
    emma "emma:emma_ant:2.0.5312"
}

metaInf << files('/META-INF/plugin.xml')


def removeIdeaJdkDependencies(def module) {
    module.dependencies.removeAll(module.dependencies.findAll {it.classes.url[0].contains(ideaInstallationPath)})
}

def changeModuleType(def module) {
    module.@type = 'PLUGIN_MODULE'
}

def removeUnnecessaryComponent(def module) {
    module.remove(module.component.find { it.@name == 'ModuleRootManager'})
}

def appendRequiredComponent(def module) {
    module.appendNode('component', ['name': 'DevKit.ModuleBuildProperties', 'url': 'file://$MODULE_DIR$/META-INF/plugin.xml'])
}

def changeComponentWithNewModuleRootManager(def module) {
    def componentWithNewModuleRootManager = module.component.find { it.@name == 'NewModuleRootManager'}
    componentWithNewModuleRootManager.remove(componentWithNewModuleRootManager.orderEntry.find { it.@type == 'inheritedJdk'})
    componentWithNewModuleRootManager.appendNode('orderEntry', ['type': 'jdk', 'jdkName': ideaJdk, 'jdkType': 'IDEA JDK'])
}